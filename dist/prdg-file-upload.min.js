angular.module("prodigi.fileupload.templates",[]),angular.module("prodigi.fileupload",["prodigi.fileupload.templates","ngFileUpload"]),angular.module("prodigi.fileupload").filter("bytes",function(){return function(e,l){if(isNaN(parseFloat(e))||!isFinite(e))return"-";"undefined"==typeof l&&(l=1);var i=["bytes","kB","MB","GB","TB","PB"],n=Math.floor(Math.log(e)/Math.log(1024));return(e/Math.pow(1024,Math.floor(n))).toFixed(l)+" "+i[n]}});var UploadingFile=function(){function e(e,l,i){this.file=e,this.result=l?l:null,this.progress=i?l:null}return e}(),PrdgFileUploadController=function(){function e(e,l,i){var n=this;this.queue=[],this.uploading=[],this.$scope=e,this.$timeout=l,this.Upload=i,this.url||console.warn("prodigi.fileupload: No URL provided for file uploads."),e.$watchCollection("vm.queue",function(e,l){var i=e.filter(function(e){return l.indexOf(e)<0});console.log("got the following new files",i),i.forEach(function(e){n.upload(e)}),n.queue=[]})}return e.prototype.upload=function(e){var l=this;if(this.url){var i=new UploadingFile(e);this.uploading.push(i),this.Upload.upload({data:{file:i.file},url:this.url,method:"POST"}).then(function(e){l.$timeout(function(){i.result=e.data;var n=l.uploading.indexOf(i);l.uploading.splice(n,1),l.multiple?l.files=l.files.concat(e.data):l.files=e.data})},function(e){e.status>0&&console.log(e.status+": "+e.data)},function(e){i.progress=Math.min(100,parseInt(100*e.loaded/e.total))})}},e.$inject=["$scope","$timeout","Upload"],e}(),PrdgFileUpload=function(){function e(){this.bindings={files:"=",url:"<",multiple:"<"},this.templateUrl="/prdgFileUpload/prdg-file-upload.html",this.controller=PrdgFileUploadController,this.controllerAs="vm"}return e}();angular.module("prodigi.fileupload").component("prdgFileUpload",new PrdgFileUpload);var ManageController=function(){function e(){}return e.prototype.removeFile=function(e){var l=this.files.indexOf(e);this.files.splice(l,1)},e}(),FileManage=function(){function e(){this.bindings={files:"="},this.templateUrl="/prdgFileUpload/components/manage/manage.html",this.controller=ManageController,this.controllerAs="vm"}return e}();angular.module("prodigi.fileupload").component("prdgFileManage",new FileManage);var UploadProgressController=function(){function e(){this.file=null}return e}(),UploadProgress=function(){function e(){this.bindings={ufile:"<"},this.templateUrl="/prdgFileUpload/components/progress/progress.html",this.controller=UploadProgressController,this.controllerAs="vm"}return e}();angular.module("prodigi.fileupload").component("prdgFileUploadProgress",new UploadProgress);var FileSelectController=function(){function e(e){this.queue=[],this.$timeout=e}return e.prototype.enqueue=function(e){var l=this;e.forEach(function(e){console.log(e),l.queue.push(e)})},e.$inject=["$timeout"],e}(),FileSelect=function(){function e(){this.bindings={queue:"=",multiple:"<"},this.templateUrl="/prdgFileUpload/components/upload/upload.html",this.controller=FileSelectController,this.controllerAs="vm"}return e}();angular.module("prodigi.fileupload").component("prdgFileSelect",new FileSelect),angular.module("prodigi.fileupload.templates").run(["$templateCache",function(e){e.put("/prdgFileUpload/prdg-file-upload.html",'<div>\n    <prdg-file-manage files="vm.files"></prdg-file-manage>\n    <div ng-repeat="file in vm.uploading">\n        <prdg-file-upload-progress ufile="file"></prdg-file-upload-progress>\n    </div>\n    <prdg-file-select queue="vm.queue" multiple="vm.multiple"></prdg-file-select>\n</div>'),e.put("/prdgFileUpload/components/manage/manage.html",'<table class="table">\n    <thead>\n    <tr><th>File Name</th><th>File Size</th><th class="text-right">Action</th></tr>\n    </thead>\n    <tbody>\n    <tr ng-repeat="file in vm.files">\n        <td><a href="{{file.download_url}}">{{file.name}}</a></td>\n        <td>{{file.file_size | bytes}}</td>\n        <td class="text-right">\n            <a class="btn btn-sm btn-primary" href="{{file.download_url}}" target="_blank"><i class="glyphicon glyphicon-save"></i> Download</a>\n            <a class="btn btn-sm btn-danger" ng-click="vm.removeFile(file)"><i class="glyphicon glyphicon-remove"></i> Remove</a>\n        </td>\n    </tr>\n    </tbody>\n</table>\n<div class="row">\n    <div class="col-sm-8"></div>\n    <div class="col-sm-4"></div>\n</div>\n'),e.put("/prdgFileUpload/components/progress/progress.html",'<div class="row mb">\n    <!--\n    <div class="col-sm-4 mb-sm">\n        <label title="{{ \'modules.upload.field.preview\' | translate }}" class="text-info">\n            {{\'modules.upload.field.preview\' | translate }}\n        </label>\n        <img ngf-src="vm.ufile.file" class="img-thumbnail img-responsive">\n        <div class="img-placeholder"\n             ng-if="vm.ufile.file.$invalid && !vm.ufile.file.blobUrl">\n            No preview available\n        </div>\n    </div>\n    -->\n\n    <div class="col-sm-8">\n        <div class="filename" title="{{ vm.ufile.file.name }}">{{ vm.ufile.file.name }}</div>\n    </div>\n    <div class="col-sm-4">\n        <div class="progress-bar" role="progressbar" ng-class="{\'progress-bar-success\': vm.ufile.progress == 100}" ng-style="{width: vm.ufile.progress + \'%\'}">\n            {{ vm.ufile.progress }} %\n        </div>\n    </div>\n\n</div>\n<!--\n<div ng-messages="uploadForm.$error" ng-messages-multiple="">\n    <div class="text-danger errorMsg" ng-message="maxSize">{{ form.schema[file.$error].validationMessage | translate }} <strong>{{file.$errorParam}}</strong>. ({{ form.schema[file.$error].validationMessage2 | translate }} <strong>{{file.size / 1000000|number:1}}MB</strong>)</div>\n    <div class="text-danger errorMsg" ng-message="pattern">{{ form.schema[file.$error].validationMessage | translate }} <strong>{{file.$errorParam}}</strong></div>\n    <div class="text-danger errorMsg" ng-message="maxItems">{{ form.schema[file.$error].validationMessage | translate }} <strong>{{file.$errorParam}}</strong></div>\n    <div class="text-danger errorMsg" ng-message="minItems">{{ form.schema[file.$error].validationMessage | translate }} <strong>{{file.$errorParam}}</strong></div>\n    <div class="text-danger errorMsg" ng-show="errorMsg">{{errorMsg}}</div>\n</div>\n-->\n'),e.put("/prdgFileUpload/components/upload/upload.html",'<div class="bg-white mb" ng-class="{\'has-error border-danger\': (uploadForm.$error.required) || (hasError() && errorMessage(schemaError()))}">\n    <small class="text-muted" ng-show="form.description" ng-bind-html="form.description"></small>\n    <div ngf-drop="vm.enqueue($files)" ngf-select="vm.enqueue($files)" type="file" ngf-multiple="vm.multiple" name="file" ng-required="vm.required" ngf-drag-over-class="dragover" class="drop-box dragAndDropDescription">\n        <p class="text-center" ng-if="!vm.multiple">{{ \'modules.upload.descriptionSinglefile\' | translate }}</p>\n        <p class="text-center" ng-if="vm.multiple">{{ \'modules.upload.descriptionMultifile\' | translate }}</p>\n    </div>\n    <div ngf-no-file-drop>{{ \'modules.upload.dndNotSupported\' | translate}}</div>\n</div>\n')}]);